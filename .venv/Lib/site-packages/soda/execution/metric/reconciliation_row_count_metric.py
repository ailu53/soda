from __future__ import annotations

from soda.execution.data_source_scan import DataSourceScan
from soda.execution.metric.query_metric import QueryMetric
from soda.execution.partition import Partition
from soda.execution.query.reconciliation_row_count_query import (
    ReconciliationRowCountQuery,
)


class ReconciliationRowCountMetric(QueryMetric):
    ###
    # The only reason this is used instead of a numeric metric is so that a separate query using WHERE clause is used and not CASE WHEN as
    # with optimized single-query aggregated numeric metrics.
    ###
    def __init__(
        self,
        data_source_scan: DataSourceScan,
        check: ReconciliationRowDiffCheck,
        partition: Partition,
        filter: filter,
    ):
        super().__init__(
            data_source_scan=data_source_scan,
            partition=partition,
            column=None,
            name="reconciliation_row_diff",
            check=check,
            identity_parts=[],
        )
        self.query = data_source_scan.data_source.sql_get_table_count(partition.table.table_name, filter)

        self.value = None

    def ensure_query(self):
        query = ReconciliationRowCountQuery(
            data_source_scan=self.data_source_scan,
            partition=self.partition,
            metric=self,
        )
        self.data_source_scan.queries.append(query)
        self.queries.append(query)
