from dataclasses import dataclass

from typing_extensions import Self


@dataclass
class ScanResult:
    checks_count: int
    checks_pass_count: int
    checks_warn_count: int
    checks_fail_count: int
    checks_not_evaluated_count: int
    error_count: int

    @staticmethod
    def from_remote_scan_result_dict(scan_result_dict: dict) -> Self:
        checks_count = len(scan_result_dict["checks"])
        pass_count = checks_count - scan_result_dict["warnings"] - scan_result_dict["failures"]
        checks_not_evaluated_count = (
            checks_count - pass_count - scan_result_dict["warnings"] - scan_result_dict["failures"]
        )

        return ScanResult(
            checks_count=checks_count,
            checks_pass_count=pass_count,
            checks_warn_count=scan_result_dict["warnings"],
            checks_fail_count=scan_result_dict["failures"],
            checks_not_evaluated_count=checks_not_evaluated_count,
            error_count=scan_result_dict["errors"],
        )
